//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Hess.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class HessLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, BOARDPOSITION=21, IDENTIFIER=22, NATURAL_NUMBER=23, 
		STRING=24, CAP_LETTER=25, BOOL=26, NULL=27, WS=28;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "BOARDPOSITION", "IDENTIFIER", "NATURAL_NUMBER", 
		"STRING", "CAP_LETTER", "BOOL", "NULL", "WS"
	};


	public HessLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public HessLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "'BOARD('", "')'", "'STARTGAME('", "','", "'='", "'{'", "'}'", 
		"'PLACE('", "'true'", "'false'", "'ATTACK'", "'MOVE'", "'ATKMOVE'", "'UP'", 
		"'LEFT'", "'RIGHT'", "'DOWN'", "'Direct'", "'Path'", null, null, null, 
		null, null, null, "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "BOARDPOSITION", 
		"IDENTIFIER", "NATURAL_NUMBER", "STRING", "CAP_LETTER", "BOOL", "NULL", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Hess.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static HessLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,28,221,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,1,0,1,
		0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
		1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,
		1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,
		1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
		1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,5,20,160,8,20,10,20,12,20,163,
		9,20,1,21,1,21,5,21,167,8,21,10,21,12,21,170,9,21,1,22,1,22,5,22,174,8,
		22,10,22,12,22,177,9,22,1,23,1,23,5,23,181,8,23,10,23,12,23,184,9,23,1,
		23,1,23,1,23,5,23,189,8,23,10,23,12,23,192,9,23,1,23,3,23,195,8,23,1,24,
		1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,208,8,25,1,26,1,
		26,1,26,1,26,1,26,1,27,4,27,216,8,27,11,27,12,27,217,1,27,1,27,0,0,28,
		1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
		29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
		53,27,55,28,1,0,8,1,0,49,57,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,
		65,90,95,95,97,122,1,0,34,34,1,0,39,39,1,0,65,90,3,0,9,10,13,13,32,32,
		228,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
		0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
		0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
		1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
		0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,
		1,0,0,0,1,57,1,0,0,0,3,59,1,0,0,0,5,66,1,0,0,0,7,68,1,0,0,0,9,79,1,0,0,
		0,11,81,1,0,0,0,13,83,1,0,0,0,15,85,1,0,0,0,17,87,1,0,0,0,19,94,1,0,0,
		0,21,99,1,0,0,0,23,105,1,0,0,0,25,112,1,0,0,0,27,117,1,0,0,0,29,125,1,
		0,0,0,31,128,1,0,0,0,33,133,1,0,0,0,35,139,1,0,0,0,37,144,1,0,0,0,39,151,
		1,0,0,0,41,156,1,0,0,0,43,164,1,0,0,0,45,171,1,0,0,0,47,194,1,0,0,0,49,
		196,1,0,0,0,51,207,1,0,0,0,53,209,1,0,0,0,55,215,1,0,0,0,57,58,5,59,0,
		0,58,2,1,0,0,0,59,60,5,66,0,0,60,61,5,79,0,0,61,62,5,65,0,0,62,63,5,82,
		0,0,63,64,5,68,0,0,64,65,5,40,0,0,65,4,1,0,0,0,66,67,5,41,0,0,67,6,1,0,
		0,0,68,69,5,83,0,0,69,70,5,84,0,0,70,71,5,65,0,0,71,72,5,82,0,0,72,73,
		5,84,0,0,73,74,5,71,0,0,74,75,5,65,0,0,75,76,5,77,0,0,76,77,5,69,0,0,77,
		78,5,40,0,0,78,8,1,0,0,0,79,80,5,44,0,0,80,10,1,0,0,0,81,82,5,61,0,0,82,
		12,1,0,0,0,83,84,5,123,0,0,84,14,1,0,0,0,85,86,5,125,0,0,86,16,1,0,0,0,
		87,88,5,80,0,0,88,89,5,76,0,0,89,90,5,65,0,0,90,91,5,67,0,0,91,92,5,69,
		0,0,92,93,5,40,0,0,93,18,1,0,0,0,94,95,5,116,0,0,95,96,5,114,0,0,96,97,
		5,117,0,0,97,98,5,101,0,0,98,20,1,0,0,0,99,100,5,102,0,0,100,101,5,97,
		0,0,101,102,5,108,0,0,102,103,5,115,0,0,103,104,5,101,0,0,104,22,1,0,0,
		0,105,106,5,65,0,0,106,107,5,84,0,0,107,108,5,84,0,0,108,109,5,65,0,0,
		109,110,5,67,0,0,110,111,5,75,0,0,111,24,1,0,0,0,112,113,5,77,0,0,113,
		114,5,79,0,0,114,115,5,86,0,0,115,116,5,69,0,0,116,26,1,0,0,0,117,118,
		5,65,0,0,118,119,5,84,0,0,119,120,5,75,0,0,120,121,5,77,0,0,121,122,5,
		79,0,0,122,123,5,86,0,0,123,124,5,69,0,0,124,28,1,0,0,0,125,126,5,85,0,
		0,126,127,5,80,0,0,127,30,1,0,0,0,128,129,5,76,0,0,129,130,5,69,0,0,130,
		131,5,70,0,0,131,132,5,84,0,0,132,32,1,0,0,0,133,134,5,82,0,0,134,135,
		5,73,0,0,135,136,5,71,0,0,136,137,5,72,0,0,137,138,5,84,0,0,138,34,1,0,
		0,0,139,140,5,68,0,0,140,141,5,79,0,0,141,142,5,87,0,0,142,143,5,78,0,
		0,143,36,1,0,0,0,144,145,5,68,0,0,145,146,5,105,0,0,146,147,5,114,0,0,
		147,148,5,101,0,0,148,149,5,99,0,0,149,150,5,116,0,0,150,38,1,0,0,0,151,
		152,5,80,0,0,152,153,5,97,0,0,153,154,5,116,0,0,154,155,5,104,0,0,155,
		40,1,0,0,0,156,157,3,49,24,0,157,161,7,0,0,0,158,160,7,1,0,0,159,158,1,
		0,0,0,160,163,1,0,0,0,161,159,1,0,0,0,161,162,1,0,0,0,162,42,1,0,0,0,163,
		161,1,0,0,0,164,168,7,2,0,0,165,167,7,3,0,0,166,165,1,0,0,0,167,170,1,
		0,0,0,168,166,1,0,0,0,168,169,1,0,0,0,169,44,1,0,0,0,170,168,1,0,0,0,171,
		175,7,0,0,0,172,174,7,1,0,0,173,172,1,0,0,0,174,177,1,0,0,0,175,173,1,
		0,0,0,175,176,1,0,0,0,176,46,1,0,0,0,177,175,1,0,0,0,178,182,5,34,0,0,
		179,181,8,4,0,0,180,179,1,0,0,0,181,184,1,0,0,0,182,180,1,0,0,0,182,183,
		1,0,0,0,183,185,1,0,0,0,184,182,1,0,0,0,185,195,5,34,0,0,186,190,5,39,
		0,0,187,189,8,5,0,0,188,187,1,0,0,0,189,192,1,0,0,0,190,188,1,0,0,0,190,
		191,1,0,0,0,191,193,1,0,0,0,192,190,1,0,0,0,193,195,5,39,0,0,194,178,1,
		0,0,0,194,186,1,0,0,0,195,48,1,0,0,0,196,197,7,6,0,0,197,50,1,0,0,0,198,
		199,5,116,0,0,199,200,5,114,0,0,200,201,5,117,0,0,201,208,5,101,0,0,202,
		203,5,102,0,0,203,204,5,97,0,0,204,205,5,108,0,0,205,206,5,115,0,0,206,
		208,5,101,0,0,207,198,1,0,0,0,207,202,1,0,0,0,208,52,1,0,0,0,209,210,5,
		110,0,0,210,211,5,117,0,0,211,212,5,108,0,0,212,213,5,108,0,0,213,54,1,
		0,0,0,214,216,7,7,0,0,215,214,1,0,0,0,216,217,1,0,0,0,217,215,1,0,0,0,
		217,218,1,0,0,0,218,219,1,0,0,0,219,220,6,27,0,0,220,56,1,0,0,0,9,0,161,
		168,175,182,190,194,207,217,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
